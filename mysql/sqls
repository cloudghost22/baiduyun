CREATE TABLE `users` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `uk` decimal(12,0) DEFAULT NULL,
  `userName` varchar(255) DEFAULT NULL,
  `followCount` int(11) DEFAULT NULL,
  `fansCount` int(11) DEFAULT NULL,
  `pubshareCount` int(11) DEFAULT NULL,
  `shareFlag` tinyint(4) DEFAULT '0',
  `followFlag` tinyint(4) DEFAULT '0',
  `fansFlag` tinyint(4) DEFAULT '0',
  PRIMARY KEY (`ID`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

ALTER table users add INDEX idx_uk(uk);
ALTER table users add INDEX idx_sharecount(pubsharecount);
ALTER table users add INDEX idx_fanscount(fanscount);
ALTER table users add INDEX idx_followcount(followcount);

CREATE TABLE `share` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `category` tinyint(4) DEFAULT NULL,
  `feed_time` decimal(13,0) DEFAULT NULL,
  `isdir` tinyint(4) DEFAULT NULL,
  `server_filename` varchar(1024) DEFAULT NULL,
  `size` decimal(18,0) unsigned DEFAULT NULL,
  `saveTime` decimal(13,0) DEFAULT NULL,
  `shareid` decimal(18,0) DEFAULT NULL,
  `shorturl` char(8) DEFAULT NULL,
  `title` varchar(1024) DEFAULT NULL,
  `uk` decimal(12,0) DEFAULT NULL,
  `username` varchar(128) DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

CREATE TABLE `errorurls` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `url` varchar(512) DEFAULT NULL,
  `flag` tinyint(4) DEFAULT '0',
  `timeStamp` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`ID`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

CREATE TABLE `album` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `url` varchar(512) DEFAULT NULL,
  `flag` tinyint(4) DEFAULT '0',
  `timeStamp` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`ID`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

CREATE TABLE `share_update` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `category` tinyint(4) DEFAULT NULL,
  `feed_time` decimal(13,0) DEFAULT NULL,
  `isdir` tinyint(4) DEFAULT NULL,
  `server_filename` varchar(1024) DEFAULT NULL,
  `size` decimal(18,0) unsigned DEFAULT NULL,
  `saveTime` decimal(13,0) DEFAULT NULL,
  `shareid` decimal(18,0) DEFAULT NULL,
  `shorturl` char(8) DEFAULT NULL,
  `title` varchar(1024) DEFAULT NULL,
  `uk` decimal(12,0) DEFAULT NULL,
  `username` varchar(128) DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=INNODB DEFAULT CHARSET=utf8;

CREATE TABLE `users_update` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `uk` decimal(12,0) DEFAULT NULL,
  `updateNumber` int(11) DEFAULT NULL,
  `totalCount` int(11) DEFAULT NULL,
  `updateTime` timestamp NULL DEFAULT NULL COMMENT 'CURRENT_TIMESTAMP',
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE `users_new` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `uk` decimal(12,0) DEFAULT NULL,
  `userName` varchar(255) DEFAULT NULL,
  `followCount` int(11) DEFAULT NULL,
  `fansCount` int(11) DEFAULT NULL,
  `pubshareCount` int(11) DEFAULT NULL,
  `shareFlag` tinyint(4) DEFAULT '0',
  `followFlag` tinyint(4) DEFAULT '0',
  `fansFlag` tinyint(4) DEFAULT '0',
  PRIMARY KEY (`ID`),
  KEY `idx_sharecount` (`pubshareCount`),
  KEY `idx_uk` (`uk`),
  KEY `idx_fanscount` (`fansCount`),
  KEY `idx_followcount` (`followCount`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE `share_new` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `category` tinyint(4) DEFAULT NULL,
  `feed_time` decimal(13,0) DEFAULT NULL,
  `isdir` tinyint(4) DEFAULT NULL,
  `server_filename` varchar(1024) DEFAULT NULL,
  `size` decimal(18,0) unsigned DEFAULT NULL,
  `saveTime` decimal(13,0) DEFAULT NULL,
  `shareid` decimal(18,0) DEFAULT NULL,
  `shorturl` char(8) DEFAULT NULL,
  `title` varchar(1024) DEFAULT NULL,
  `uk` decimal(12,0) DEFAULT NULL,
  `username` varchar(128) DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

-- ALTER TABLE share ADD FULLTEXT INDEX ft_index (title) WITH PARSER ngram;

CREATE  VIEW `v_fetcheduser` AS select `users`.`uk` AS `uk` from `users` where (`users`.`shareFlag` = 1);

CREATE  VIEW `v_fanseduser` AS select `users`.`uk` AS `uk` from `users` where (`users`.`fansFlag` = 1);

CREATE  VIEW `v_followeduser` AS select `users`.`uk` AS `uk` from `users` where (`users`.`followFlag` = 1);

delete from share_new where id not in (select maxid from (select max(id) as maxid from share_new group by shareid) b);

//查询表空间大小
select concat(round(sum(data_length/1024/1024),2),'MB') as data_length_MB,concat(round(sum(index_length/1024/1024),2),'MB') as index_length_MB  from tables where  table_schema='baiduyun'  and table_name = 'share';

//更新用户
insert into users(username,followcount,fanscount,pubsharecount)
select username,followcount,fanscount,pubsharecount from users_new

//更新用户状态
update users set users.updateTime = (select users_update.updateTime from users_update where users.uk = users_update.uk)
WHERE EXISTS (select users_update.uk from users_update where users_update.uk = users.uk)

//删除已有share
delete from share_new where id in (SELECT id from (select a.id from share_new a,share b where a.uk = b.uk and a.shareid = b.shareid) xx)

//删除share_update中的重复数据
delete from share_update where id in (select maxid from (select min(id) as maxid from (select y.id,y.uk,y.shareid from (SELECT uk,shareid,count(*) from share_update group by uk,shareid HAVING count(*)>1) x,share_update y
where x.uk = y.uk and x.shareid = y.shareid) x group by uk,shareid) b);


//############更新share_new步骤########################
//检查是否有重复数据
select maxid from (select min(id) as maxid from (select y.id,y.uk,y.shareid from (SELECT uk,shareid,count(*) from share_new group by uk,shareid HAVING count(*)>1) x,share_update y
where x.uk = y.uk and x.shareid = y.shareid) x group by uk,shareid) b

//如果有，删除重复数据
delete from share_new (select maxid from (select min(id) as maxid from (select y.id,y.uk,y.shareid from (SELECT uk,shareid,count(*) from share_new group by uk,shareid HAVING count(*)>1) x,share_update y where x.uk = y.uk and x.shareid = y.shareid) x group by uk,shareid) b);

//检查数据是否已经存在
select count(*) from share a,share_new b where a.uk = b.uk and a.shareid = b.shareid;

//如果有，删除已有数据
delete from share_new where id in (SELECT id from (select a.id from share_new a,share b where a.uk = b.uk and a.shareid = b.shareid) xx);

//插入share主表
insert into share(category,feed_time,isdir,server_filename,size,saveTime,shareid,shorturl,title,uk,username) SELECT category,feed_time,isdir,server_filename,size,saveTime,shareid,shorturl,title,uk,username FROM share_new;

//导出表

//删除share_new表
truncate table share_new;

//############更新share_update步骤########################
//检查是否有重复数据
select maxid from (select min(id) as maxid from (select y.id,y.uk,y.shareid from (SELECT uk,shareid,count(*) from share_update group by uk,shareid HAVING count(*)>1) x,share_update y
where x.uk = y.uk and x.shareid = y.shareid) xx group by uk,shareid) b

//如果有，删除重复数据
delete from share_update where id in (select maxid from (select min(id) as maxid from (select y.id,y.uk,y.shareid from (SELECT uk,shareid,count(*) from share_update group by uk,shareid HAVING count(*)>1) x,share_update y
where x.uk = y.uk and x.shareid = y.shareid) xx group by uk,shareid) b);

//检查数据是否已经存在
select count(*) from share a,share_update b where a.uk = b.uk and a.shareid = b.shareid;

//如果有，删除已有数据
delete from share_update where id in (SELECT id from (select a.id from share_update a,share b where a.uk = b.uk and a.shareid = b.shareid) xx);

//插入share主表
insert into share(category,feed_time,isdir,server_filename,size,saveTime,shareid,shorturl,title,uk,username) SELECT category,feed_time,isdir,server_filename,size,saveTime,shareid,shorturl,title,uk,username FROM share_update;

//导出表

//删除share_update表
truncate table share_update;


//##############更新user_new步骤###############
//删除重复数据
delete from users_new where id not in (select maxid from (select max(id) as maxid from users_new group by uk) b);

//删除uses表中重复数据
delete from users_new where id in (select id from (select a.id from users_new a,users b where a.uk = b.uk) x);

//将users_new中的数据插入users表
insert into users(username,followcount,fanscount,pubsharecount,uk)
select username,followcount,fanscount,pubsharecount,uk from users_new;

//##############更新user_update步骤###############
//删除重复的users_update数据
delete from users_update where id not in (select maxid from (select max(id) as maxid from users_update group by uk) b);

//更新用户更新时间
update users set users.updateTime = (select users_update.updateTime from users_update where users.uk = users_update.uk)
WHERE EXISTS (select users_update.uk from users_update where users_update.uk = users.uk);
//更新总数
update users set users.pubshareCount = (select users_update.totalCount from users_update where users.uk = users_update.uk)
WHERE EXISTS (select users_update.uk from users_update where users_update.uk = users.uk);
//更新已更新数量
update users set users.updateNumbers = (select users_update.updateNumber from users_update where users.uk = users_update.uk)
WHERE EXISTS (select users_update.uk from users_update where users_update.uk = users.uk);

//更新shareflag = 1
update users set users.shareFlag = 1
WHERE id in (select x.id from (select y.id from users y where y.updateTime is not null and y.shareFlag = 0) x)

//#############sphinx indexer############
//更新全部索引
indexer -c /etc/sphinxsearch/sphinx-min.conf.dist --all --rotate